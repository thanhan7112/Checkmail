import streamlit as st
import requests
import pandas as pd
import re
import smtplib
import socket
import dns.resolver
import random
import string
from io import BytesIO

# ========== C·∫•u h√¨nh ==========
API_KEYS = [
    "c985842edb6f4049a6d0977928cdc4a7",
    "0d1f2b3d9f054a2e9fdd398ae019a76b",
    "2b88713468ba46bdb602c007da9d12cc",
    "a2f856614f2d41aca555a01df86b0599",
    "dd2b9a685420437f9933c1bf61889847",
    "2f0d37f98c6345818840dc31c14d2a75",
    "8017751baaea40a7918a299257ef90fb",
    "e6539e72e81c4c948a336a22c40d6565",
    "ee110d38f1d1461f820317426c4fd709",
    "73614f4f15a44082abb40c6d25feb13e",
    "a58021e0795b45e7bd3604f766d01809",
    "14d136c854034f6f95edb27d5264833d",
    "476bcc6eafa84f71abf10152e53c7e1f",
    "aee1766f20ee403ca90dc5dac23153e0",
    "8c81f01b09324dbf9966884b26759bb1"
]
API_URL = "https://emailvalidation.abstractapi.com/v1/"

# C√°c danh s√°ch t√™n mi·ªÅn v√† t√†i kho·∫£n vai tr√≤
FREE_DOMAINS = {
    "gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "aol.com",
    "icloud.com", "mail.com", "yandex.com", "protonmail.com"
}
DISPOSABLE_DOMAINS = {
    "10minutemail.com", "temp-mail.org", "mailinator.com", "yopmail.com",
    "guerrillamail.com"
}
ROLE_ACCOUNTS = {
    "admin", "support", "info", "contact", "sales", "hr", "billing",
    "postmaster", "abuse", "noreply", "marketing"
}

# ==============================================================================
# ==========               C√ÅC H√ÄM KI·ªÇM TRA EMAIL               ==========
# ==============================================================================

# ---------- 1. Ki·ªÉm tra b·∫±ng Abstract API (D√πng khi c·∫ßn ƒë·ªô ch√≠nh x√°c cao) ----------
def check_email_api(email):
    """G·ª≠i y√™u c·∫ßu ƒë·∫øn Abstract API ƒë·ªÉ x√°c th·ª±c email."""
    for api_key in API_KEYS:
        try:
            response = requests.get(
                API_URL,
                params={"api_key": api_key, "email": email},
                timeout=10
            )
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 401:
                # Key kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n, th·ª≠ key ti·∫øp theo
                continue
        except requests.exceptions.RequestException:
            # L·ªói m·∫°ng ho·∫∑c timeout, th·ª≠ key ti·∫øp theo
            continue
    return None

# ---------- 2. L·∫•y MX record (Ph∆∞∆°ng ph√°p n√¢ng cao) ----------
def get_mx_records_robust(domain):
    """
    L·∫•y b·∫£n ghi MX c·ªßa m·ªôt t√™n mi·ªÅn.
    ∆Øu ti√™n s·ª≠ d·ª•ng th∆∞ vi·ªán dnspython, n·∫øu th·∫•t b·∫°i s·∫Ω d√πng Google DNS API l√†m d·ª± ph√≤ng.
    """
    # C√°ch 1: D√πng dnspython (ch√≠nh th·ªëng v√† ƒë√°ng tin c·∫≠y h∆°n)
    try:
        records = dns.resolver.resolve(domain, 'MX')
        # S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ∆∞u ti√™n (s·ªë nh·ªè h∆°n = ∆∞u ti√™n cao h∆°n)
        mx_records = sorted([(r.preference, r.exchange.to_text()) for r in records])
        return mx_records
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.resolver.Timeout):
        # C√°ch 2: D·ª± ph√≤ng b·∫±ng Google DNS API
        try:
            r = requests.get(f"https://dns.google/resolve?name={domain}&type=MX", timeout=5)
            r.raise_for_status()
            data = r.json()
            if "Answer" in data:
                answers = sorted(
                    [ans["data"].split() for ans in data.get("Answer", []) if ans.get("type") == 15],
                    key=lambda x: int(x[0])
                )
                return [(int(p), ex) for p, ex in answers]
            return []
        except requests.exceptions.RequestException:
            return []
    except Exception:
        return []

# ---------- 3. Ki·ªÉm tra mi·ªÖn ph√≠ n√¢ng cao (C·∫£i ti·∫øn) ----------
def check_email_free_super_advanced(email):
    """
    Th·ª±c hi·ªán ki·ªÉm tra email nhi·ªÅu b∆∞·ªõc m√† kh√¥ng c·∫ßn API.
    Bao g·ªìm: Regex, lo·∫°i domain, MX record, v√† ki·ªÉm tra SMTP n√¢ng cao (ph√°t hi·ªán catch-all).
    """
    result = {
        "email": email, "deliverability": "UNKNOWN", "quality_score": "-",
        "is_valid_format": {"value": False, "text": "FALSE"},
        "is_free_email": {"value": False, "text": "FALSE"},
        "is_disposable_email": {"value": False, "text": "FALSE"},
        "is_role_email": {"value": False, "text": "FALSE"},
        "is_catchall_email": {"value": False, "text": "UNKNOWN"},
        "is_mx_found": {"value": False, "text": "FALSE"},
        "is_smtp_valid": {"value": False, "text": "UNKNOWN"},
    }

    # B∆∞·ªõc 1: Ki·ªÉm tra ƒë·ªãnh d·∫°ng b·∫±ng Regex
    regex = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if not re.match(regex, email):
        result["deliverability"] = "UNDELIVERABLE"
        return result
    result["is_valid_format"] = {"value": True, "text": "TRUE"}

    local_part, domain = email.split("@")

    # B∆∞·ªõc 2: Ph√¢n lo·∫°i email d·ª±a tr√™n danh s√°ch c√≥ s·∫µn
    if domain in FREE_DOMAINS:
        result["is_free_email"] = {"value": True, "text": "TRUE"}
    if domain in DISPOSABLE_DOMAINS:
        result["is_disposable_email"] = {"value": True, "text": "TRUE"}
        result["deliverability"] = "UNDELIVERABLE"
        return result
    if local_part.lower() in ROLE_ACCOUNTS:
        result["is_role_email"] = {"value": True, "text": "TRUE"}

    # B∆∞·ªõc 3: T√¨m ki·∫øm b·∫£n ghi MX
    mx_records = get_mx_records_robust(domain)
    if not mx_records:
        result["deliverability"] = "UNDELIVERABLE"
        return result
    result["is_mx_found"] = {"value": True, "text": "TRUE"}

    # T·∫°m tin t∆∞·ªüng c√°c nh√† cung c·∫•p email mi·ªÖn ph√≠ l·ªõn v√¨ h·ªç th∆∞·ªùng ch·∫∑n ki·ªÉm tra SMTP
    if result["is_free_email"]["value"]:
        result["deliverability"] = "DELIVERABLE"
        result["is_smtp_valid"] = {"value": True, "text": "TRUE"}
        return result

    # B∆∞·ªõc 4: Ki·ªÉm tra SMTP n√¢ng cao
    for _, mx_record in mx_records:
        try:
            with smtplib.SMTP(mx_record, 25, timeout=10) as server:
                server.set_debuglevel(0)
                hostname = socket.getfqdn() or 'example.com'
                server.ehlo(hostname)
                server.mail(f'verify@{hostname}')
                
                # Ki·ªÉm tra email th·∫≠t
                code, _ = server.rcpt(str(email))
                
                if code == 250: # M√£ 250: OK, email t·ªìn t·∫°i
                    result["is_smtp_valid"] = {"value": True, "text": "TRUE"}
                    result["deliverability"] = "DELIVERABLE"

                    # --> B·∫Øt ƒë·∫ßu ki·ªÉm tra Catch-all <--
                    random_local = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(20))
                    random_email = f"{random_local}@{domain}"
                    code_catchall, _ = server.rcpt(random_email)
                    
                    if code_catchall == 250:
                        result["is_catchall_email"] = {"value": True, "text": "TRUE"}
                        result["deliverability"] = "RISKY"
                    else:
                        result["is_catchall_email"] = {"value": False, "text": "FALSE"}
                    
                    return result # ƒê√£ c√≥ k·∫øt qu·∫£, tho√°t ho√†n to√†n

                elif code >= 500: # M√£ 5xx: L·ªói vƒ©nh vi·ªÖn, email kh√¥ng t·ªìn t·∫°i
                    result["is_smtp_valid"] = {"value": False, "text": "FALSE"}
                    result["deliverability"] = "UNDELIVERABLE"
                    return result
                
                # N·∫øu m√£ l√† 4xx (l·ªói t·∫°m th·ªùi), ta kh√¥ng l√†m g√¨ v√† ƒë·ªÉ v√≤ng l·∫∑p th·ª≠ MX record ti·∫øp theo

        except (smtplib.SMTPConnectError, smtplib.SMTPServerDisconnected, socket.timeout):
            continue # L·ªói k·∫øt n·ªëi, th·ª≠ MX record ti·∫øp theo
        except Exception:
            result["deliverability"] = "UNKNOWN" # L·ªói kh√¥ng x√°c ƒë·ªãnh, d·ª´ng l·∫°i
            return result
            
    return result

# ==============================================================================
# ==========                  GIAO DI·ªÜN STREAMLIT                 ==========
# ==============================================================================

st.set_page_config(page_title="C√¥ng c·ª• ki·ªÉm tra Email", layout="wide", initial_sidebar_state="collapsed")
st.title("üìß C√¥ng c·ª• ki·ªÉm tra Email (Phi√™n b·∫£n n√¢ng c·∫•p)")

st.info(
    "**C√°ch ho·∫°t ƒë·ªông:** C√¥ng c·ª• n√†y k·∫øt h·ª£p ph∆∞∆°ng ph√°p ki·ªÉm tra mi·ªÖn ph√≠ (Regex, MX, SMTP) v√† API tr·∫£ ph√≠.\n"
    "1.  **Ki·ªÉm tra mi·ªÖn ph√≠ tr∆∞·ªõc:** Nhanh ch√≥ng lo·∫°i b·ªè c√°c email sai ƒë·ªãnh d·∫°ng, kh√¥ng c√≥ m√°y ch·ªß ho·∫∑c t·∫°m th·ªùi.\n"
    "2.  **D√πng API khi c·∫ßn:** ƒê·ªëi v·ªõi c√°c tr∆∞·ªùng h·ª£p kh√≥ (`UNKNOWN`, `RISKY`) ho·∫∑c c√°c email mi·ªÖn ph√≠ (Gmail, Outlook,...), c√¥ng c·ª• s·∫Ω g·ªçi API ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t."
)

emails_input = st.text_area(
    "Nh·∫≠p danh s√°ch email (m·ªói email m·ªôt d√≤ng):",
    height=250,
    placeholder="example@gmail.com\nsupport@company.com\nwrong-email@domain",
)

if st.button("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra", use_container_width=True):
    emails = [e.strip().lower() for e in emails_input.splitlines() if e.strip()]
    
    if not emails:
        st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt email ƒë·ªÉ ki·ªÉm tra.")
    else:
        results = []
        progress_bar = st.progress(0, text="B·∫Øt ƒë·∫ßu...")
        status_text = st.empty()

        for i, email in enumerate(emails):
            status_text.text(f"‚öôÔ∏è ƒêang ki·ªÉm tra: {email} ({i+1}/{len(emails)})")

            # Lu√¥n ch·∫°y ki·ªÉm tra mi·ªÖn ph√≠ tr∆∞·ªõc
            final_data = check_email_free_super_advanced(email)

            # Quy·∫øt ƒë·ªãnh c√≥ c·∫ßn d√πng API hay kh√¥ng
            is_risky = final_data["deliverability"] in ["UNKNOWN", "RISKY"]
            is_free = final_data["is_free_email"]["value"]
            
            if is_risky or is_free:
                status_text.text(f"‚öôÔ∏è ƒêang ki·ªÉm tra: {email} ({i+1}/{len(emails)}) - C·∫ßn x√°c th·ª±c s√¢u h∆°n, ƒëang d√πng API...")
                api_data = check_email_api(email)
                if api_data:
                    # N·∫øu API th√†nh c√¥ng, d√πng k·∫øt qu·∫£ c·ªßa API
                    final_data = api_data
            
            # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
            results.append({
                "Email": final_data.get("email"),
                "Kh·∫£ nƒÉng g·ª≠i": final_data.get("deliverability", "-"),
                "ƒêi·ªÉm tin c·∫≠y": final_data.get("quality_score", "-"),
                "ƒê·ªãnh d·∫°ng h·ª£p l·ªá": "‚úÖ C√≥" if final_data.get("is_valid_format", {}).get("value") else "‚ùå Kh√¥ng",
                "Lo·∫°i email": (
                    "Mi·ªÖn ph√≠" if final_data.get("is_free_email", {}).get("value") else
                    "T·∫°m th·ªùi" if final_data.get("is_disposable_email", {}).get("value") else
                    "Chung" if final_data.get("is_role_email", {}).get("value") else
                    "B√¨nh th∆∞·ªùng"
                ),
                "Nh·∫≠n t·∫•t c·∫£ (Catchall)": "‚úÖ C√≥" if final_data.get("is_catchall_email", {}).get("value") else "‚ùå Kh√¥ng",
                "C√≥ MX record": "‚úÖ C√≥" if final_data.get("is_mx_found", {}).get("value") else "‚ùå Kh√¥ng",
                "SMTP h·ª£p l·ªá": "‚úÖ C√≥" if final_data.get("is_smtp_valid", {}).get("value") else "‚ùå Kh√¥ng",
            })

            progress_bar.progress((i + 1) / len(emails), text=f"Ho√†n th√†nh {i+1}/{len(emails)}")

        status_text.success("üéâ Ho√†n th√†nh ki·ªÉm tra!")
        df = pd.DataFrame(results)
        
        st.subheader("B·∫£ng k·∫øt qu·∫£")
        st.dataframe(df, use_container_width=True)

        # Ch·ª©c nƒÉng t·∫£i v·ªÅ
        st.subheader("T·∫£i v·ªÅ k·∫øt qu·∫£")
        col1, col2 = st.columns(2)

        # T·∫£i v·ªÅ CSV
        csv = df.to_csv(index=False).encode("utf-8")
        with col1:
            st.download_button(
                label="üì• T·∫£i v·ªÅ file CSV",
                data=csv,
                file_name="ket_qua_kiem_tra_email.csv",
                mime="text/csv",
                use_container_width=True,
            )

        # T·∫£i v·ªÅ Excel
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="K·∫øt qu·∫£")
        
        with col2:
            st.download_button(
                label="üì• T·∫£i v·ªÅ file Excel",
                data=output.getvalue(),
                file_name="ket_qua_kiem_tra_email.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
            )
