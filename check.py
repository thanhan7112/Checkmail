import streamlit as st
import requests
import pandas as pd
import re
import dns.resolver
import smtplib

# ========== C·∫•u h√¨nh ==========
API_KEYS = [
    "c985842edb6f4049a6d0977928cdc4a7",
    "0d1f2b3d9f054a2e9fdd398ae019a76b",
    "2b88713468ba46bdb602c007da9d12cc",
    "a2f856614f2d41aca555a01df86b0599",
    "dd2b9a685420437f9933c1bf61889847",
    "2f0d37f98c6345818840dc31c14d2a75",
    "8017751baaea40a7918a299257ef90fb",
    "e6539e72e81c4c948a336a22c40d6565",
    "ee110d38f1d1461f820317426c4fd709",
    "73614f4f15a44082abb40c6d25feb13e",
    "a58021e0795b45e7bd3604f766d01809",
    "14d136c854034f6f95edb27d5264833d",
    "476bcc6eafa84f71abf10152e53c7e1f",
    "aee1766f20ee403ca90dc5dac23153e0",
    "8c81f01b09324dbf9966884b26759bb1"
]
API_URL = "https://emailvalidation.abstractapi.com/v1/"
FREE_DOMAINS = {
    "gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "aol.com", 
    "icloud.com", "mail.com", "yandex.com", "protonmail.com"
}
DISPOSABLE_DOMAINS = {
    "10minutemail.com", "temp-mail.org", "mailinator.com", "yopmail.com",
    "guerrillamail.com" 
}
ROLE_ACCOUNTS = {
    "admin", "support", "info", "contact", "sales", "hr", "billing", 
    "postmaster", "abuse", "noreply", "marketing"
}

# ========== Abstract API (Kh√¥ng thay ƒë·ªïi) ==========
def check_email_api(email):
    for api_key in API_KEYS:
        try:
            r = requests.get(API_URL, params={"api_key": api_key, "email": email}, timeout=10)
            if r.status_code == 200:
                return r.json()
            elif r.status_code == 401:
                continue  # th·ª≠ key kh√°c
        except requests.exceptions.RequestException:
            continue
    return None  # n·∫øu t·∫•t c·∫£ key ƒë·ªÅu l·ªói

# ========== Free Check N√ÇNG C·∫§P ==========
def check_email_free_advanced(email):
    # Kh·ªüi t·∫°o k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh
    result = {
        "email": email, "deliverability": "UNKNOWN", "quality_score": "-",
        "is_valid_format": {"value": False, "text": "FALSE"},
        "is_free_email": {"value": False, "text": "FALSE"},
        "is_disposable_email": {"value": False, "text": "FALSE"},
        "is_role_email": {"value": False, "text": "FALSE"},
        "is_catchall_email": {"value": False, "text": "UNKNOWN"},
        "is_mx_found": {"value": False, "text": "FALSE"},
        "is_smtp_valid": {"value": False, "text": "FALSE"},
    }

    # 1. Ki·ªÉm tra ƒë·ªãnh d·∫°ng (Regex)
    regex = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if not re.match(regex, email):
        result["deliverability"] = "UNDELIVERABLE"
        return result
    result["is_valid_format"] = {"value": True, "text": "TRUE"}

    # T√°ch local part v√† domain
    local_part, domain = email.split("@")

    # 2. Ki·ªÉm tra c√°c lo·∫°i email d·ª±a tr√™n danh s√°ch
    if domain in FREE_DOMAINS:
        result["is_free_email"] = {"value": True, "text": "TRUE"}
    if domain in DISPOSABLE_DOMAINS:
        result["is_disposable_email"] = {"value": True, "text": "TRUE"}
        result["deliverability"] = "UNDELIVERABLE" # Email t·∫°m th·ªùi coi nh∆∞ kh√¥ng g·ª≠i ƒë∆∞·ª£c
        return result
    if local_part.lower() in ROLE_ACCOUNTS:
        result["is_role_email"] = {"value": True, "text": "TRUE"}

    # 3. Ki·ªÉm tra b·∫£n ghi MX (DNS)
    try:
        mx_records = dns.resolver.resolve(domain, "MX")
        if not mx_records:
            result["deliverability"] = "UNDELIVERABLE"
            return result
        result["is_mx_found"] = {"value": True, "text": "TRUE"}
        mx_record = str(mx_records[0].exchange)
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.exception.Timeout):
        result["deliverability"] = "UNDELIVERABLE"
        return result

    # 4. Ki·ªÉm tra SMTP s√¢u (X√°c th·ª±c ng∆∞·ªùi nh·∫≠n)
    # C√°c nh√† cung c·∫•p l·ªõn (Gmail, Outlook) th∆∞·ªùng ch·∫∑n c√°ch n√†y, n√™n ta b·ªè qua.
    if result["is_free_email"]["value"]:
        return result # Tr·∫£ v·ªÅ k·∫øt qu·∫£ hi·ªán t·∫°i v√† ƒë·ªÉ logic ch√≠nh g·ªçi API

    try:
        # K·∫øt n·ªëi t·ªõi server mail
        server = smtplib.SMTP(mx_record, timeout=10)
        server.set_debuglevel(0)
        server.ehlo()
        
        # G·ª≠i l·ªánh MAIL FROM
        # M·ªôt s·ªë server y√™u c·∫ßu ƒë·ªãa ch·ªâ email h·ª£p l·ªá
        server.mail('test@example.com')
        
        # G·ª≠i l·ªánh RCPT TO ƒë·ªÉ ki·ªÉm tra email
        # ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t
        code, message = server.rcpt(email)
        server.quit()

        if code == 250: # M√£ 250: OK - ƒê·ªãa ch·ªâ email t·ªìn t·∫°i
            result["is_smtp_valid"] = {"value": True, "text": "TRUE"}
            result["deliverability"] = "DELIVERABLE"
        elif code == 550: # M√£ 550: User unknown - Kh√¥ng t·ªìn t·∫°i
            result["is_smtp_valid"] = {"value": False, "text": "FALSE"}
            result["deliverability"] = "UNDELIVERABLE"
        else: # C√°c m√£ kh√°c (4xx - l·ªói t·∫°m th·ªùi) -> kh√¥ng ch·∫Øc ch·∫Øn
            result["deliverability"] = "RISKY"

    except (smtplib.SMTPConnectError, smtplib.SMTPServerDisconnected, socket.timeout, socket.error):
        # Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c server t·ª´ ch·ªëi, kh√¥ng th·ªÉ x√°c ƒë·ªãnh
        result["deliverability"] = "UNKNOWN"
    except Exception:
        result["deliverability"] = "UNKNOWN"

    return result

# ========== Streamlit App (Logic ƒë∆∞·ª£c c·∫≠p nh·∫≠t) ==========
st.set_page_config(page_title="C√¥ng c·ª• ki·ªÉm tra Email", layout="wide")
st.title("üìß C√¥ng c·ª• ki·ªÉm tra Email (Phi√™n b·∫£n n√¢ng c·∫•p)")

emails_input = st.text_area("Nh·∫≠p danh s√°ch email (m·ªói d√≤ng 1 email):", height=200)

if st.button("Ki·ªÉm tra email"):
    emails = [e.strip().lower() for e in emails_input.splitlines() if e.strip()]
    results = []
    
    progress_bar = st.progress(0)
    status_text = st.empty()

    for i, email in enumerate(emails):
        status_text.text(f"ƒêang ki·ªÉm tra: {email} ({i+1}/{len(emails)})")

        # B∆∞·ªõc 1: Lu√¥n ch·∫°y Free check n√¢ng c·∫•p tr∆∞·ªõc
        free_data = check_email_free_advanced(email)

        # B∆∞·ªõc 2: Ch·ªâ g·ªçi API khi th·ª±c s·ª± c·∫ßn thi·∫øt
        # C·∫ßn API khi:
        # - K·∫øt qu·∫£ kh√¥ng ch·∫Øc ch·∫Øn (UNKNOWN, RISKY)
        # - Ho·∫∑c l√† email mi·ªÖn ph√≠ (Gmail, etc.) v√¨ SMTP check kh√¥ng hi·ªáu qu·∫£
        need_api = (
            free_data["deliverability"] in ["UNKNOWN", "RISKY"]
            or free_data["is_free_email"]["value"]
        )

        final_data = free_data
        if need_api:
            api_data = check_email_api(email)
            if api_data:
                # N·∫øu API th√†nh c√¥ng, l·∫•y k·∫øt qu·∫£ t·ª´ API l√†m k·∫øt qu·∫£ cu·ªëi c√πng
                final_data = api_data
        
        # Chu·∫©n h√≥a hi·ªÉn th·ªã (th√™m .get ƒë·ªÉ tr√°nh l·ªói n·∫øu key kh√¥ng t·ªìn t·∫°i)
        results.append({
            "Email": final_data.get("email"),
            "Kh·∫£ nƒÉng g·ª≠i": final_data.get("deliverability", "-"),
            "ƒêi·ªÉm tin c·∫≠y": final_data.get("quality_score", "-"),
            "ƒê·ªãnh d·∫°ng h·ª£p l·ªá": "C√≥" if final_data.get("is_valid_format", {}).get("value") else "Kh√¥ng",
            "Lo·∫°i email": (
                "Mi·ªÖn ph√≠" if final_data.get("is_free_email", {}).get("value") else
                "T·∫°m th·ªùi" if final_data.get("is_disposable_email", {}).get("value") else
                "Chung" if final_data.get("is_role_email", {}).get("value") else
                "B√¨nh th∆∞·ªùng"
            ),
            "Nh·∫≠n t·∫•t c·∫£ (Catchall)": "C√≥" if final_data.get("is_catchall_email", {}).get("value") else "Kh√¥ng",
            "C√≥ MX record": "C√≥" if final_data.get("is_mx_found", {}).get("value") else "Kh√¥ng",
            "SMTP h·ª£p l·ªá": "C√≥" if final_data.get("is_smtp_valid", {}).get("value") else "Kh√¥ng",
        })

        progress_bar.progress((i + 1) / len(emails))

    status_text.text("Ho√†n th√†nh!")
    df = pd.DataFrame(results)
    st.dataframe(df, use_container_width=True)